
Build docker image::::
docker build -t shoppingapp .

Check docker commands:
Open terminal from vs and type: docker


Push docker image in docker hub steps:
1):Open terminal from vs
2): docker login
3): Enter credentails
4): Tag docker image: docker tag ImageID(f45) dockerhubImageName(utahir604/shoppingapp) then check: docker images
5): Push image: docker push imagename(utahir604/shoppingapp:latest)


Automate Builds using GitHub and Docker Hub for Shopping.Client Microservice:

1): Go to build section in Dockehub, Link Github Repo (but, it's paid). So find another mechanism
2): Specify branch
3): Docker file path: Shopping/Shopping.Client/Dockerfile
4): Go to your project github settings and dockerhub username and token, token will be generate from dockerhub settings(security)
Security token: dckr_pat_WhpRT9Wzo2EIyHwMe89pdQ7eSMU

Run Mongo docker container:

docker run -d -p 27017:27017 --name shopping-mongo mongo
docker exec -it shopping-mongo /bin/bash

Check mongo folders command:
ls

To run mongo commands:
mongo
Create new db command:
use CatalogDb
create collection command:
db.createCollection('Products')
insert record in Products collection command:
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
get records from Products collection command:
db.Products.find({}).pretty()
delete records from Products collection command:
db.Products.remove({})

Run docker compose file:
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d
Stop all containers which are part of docker compose file:
docker-compose -f docker-compose.yml -f docker-compose.override.yml down


Create Pods on Kubernetes in Imperative way:

kubectl run swn-nginx --image=nginx (Comment: swn-nginx is a pod name) 
check pod: kubectl get all
port forwarding: kubectl port-forward swn-nginx 8080:80
Note imperative way run only for 1 time, if any new operation occurs 
Delete pod: kubectl delete pod swn-nginx

Creating Deployment on Kubernetes:
kubectl create
kubectl create deployment nginx-depl --image=nginx
kubectl get deployment
kubectl get all
kubectl edit deployment nginx-depl

Troubleshooting on Kubernetes:-
kubectl logs nginx-depl-c88549479-l4vs2
Create mongo deployment:
kubectl create deployment mongo-depl --image=mongo
kubectl get pod
kubectl describe pod mongo-depl-8fbdb868c-6jgjv
kubectl get all
kubectl get deployment
kubectl delete deployment mongo-depl
kubectl delete deployment nginx-depl
kubectl get all